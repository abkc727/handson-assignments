package com.hsbc.model.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.hsbc.exception.AuthenticationException;
import com.hsbc.model.beans.Contact;
import com.hsbc.model.beans.Profile;
import com.hsbc.model.utility.DBUtility;

public class ProfileDaoImpl implements ProfileDao {

	@Override
	public Profile authenticate(int profileId, String password) throws AuthenticationException {
		Profile profile = null;
		try {
			Connection connection = DBUtility.getConnection();
			PreparedStatement sequenceStatement = connection.prepareStatement("select * from profile where profile_id = ? and password = ?");
			sequenceStatement.setInt(1, profileId);
			sequenceStatement.setString(2, password);
			
			ResultSet rs = sequenceStatement.executeQuery();
			while(rs.next()) {
				profile = new Profile();
				profile.setDob(rs.getString("dob"));
				profile.setName(rs.getString("name"));
				profile.setPassword(rs.getString("password"));
				profile.setPhone(rs.getLong("phone"));
				profile.setProfileId(rs.getInt("profile_id"));
				
				return profile;
				
			}
			rs.close();
			sequenceStatement.close();
			connection.close();
		
		if(profile == null) {
			throw new AuthenticationException("Sorry Username or Password is Incorrect");
		} 
	} catch(SQLException | ClassNotFoundException e) {
		e.printStackTrace();
	}
		return profile;
	}

	@Override
	public Profile store(Profile profile) {
		try {
			Connection connection = DBUtility.getConnection();
			
			PreparedStatement sequenceStatement = connection.prepareStatement("values(next value for seq_id)");
			ResultSet rs = sequenceStatement.executeQuery();
			int seq = 0;
			if(rs.next()) {
				seq = rs.getInt(1);
			} 
			if(seq == 0) {
				// throw some exception to the client
			} 
			
			PreparedStatement insertStatement = 
					connection.prepareStatement("insert into profile values(?,?,?,?,?)");
			insertStatement.setInt(1, seq);
			
			
			insertStatement.setString(2, profile.getName());
			
			insertStatement.setString(3, profile.getPassword());
		
			insertStatement.setLong(4, profile.getPhone());
			
			insertStatement.setString(5, profile.getDob());
			//profile.setProfileId(seq);
			insertStatement.executeUpdate();
			System.out.println("User created with an id = "+seq);
			insertStatement.close();
			connection.close();
		} catch (SQLException | ClassNotFoundException e) {
			e.printStackTrace();
		}
		
		return profile;
		
	}

	@Override
	public Contact storeContact(int id, Contact contact) {
		try {
			Connection connection = DBUtility.getConnection();
			
			PreparedStatement sequenceStatement = connection.prepareStatement("values(next value for newseq_id)");
			ResultSet rs = sequenceStatement.executeQuery();
			int seq = 0;
			if(rs.next()) {
				seq = rs.getInt(1);
			} 
			if(seq == 0) {
				// throw some exception to the client
			} 
			
			PreparedStatement insertStatement = 
					connection.prepareStatement("insert into contacts values(?,?,?,?)");
			insertStatement.setInt(1, seq);
			
			
			insertStatement.setString(2, contact.getContactName());
			
			
		
			insertStatement.setLong(3, contact.getContactNo());
			
			insertStatement.setInt(4, id);
			//profile.setProfileId(seq);
			insertStatement.executeUpdate();
			System.out.println("User created with an id = "+seq);
			insertStatement.close();
			connection.close();
		} catch (SQLException | ClassNotFoundException e) {
			e.printStackTrace();
		}
		
		return contact;
	}

	@Override
	public List<Contact> getContacts(int id) {
		List<Contact> list = new ArrayList<Contact>();
		
		try {
			Connection connection = DBUtility.getConnection();
			String loginQuery = "select * from contacts ";
			PreparedStatement preparedStatement = connection.prepareStatement(loginQuery);
			
			ResultSet resultSet = preparedStatement.executeQuery();
			
			while(resultSet.next()) {
				User user = new User();
				user.setName(resultSet.getString("name"));
				user.setUserId(resultSet.getInt("user_id"));
				user.setPassword(resultSet.getString("password"));
				user.setPhone(resultSet.getLong("phone"));
				list.add(user);
								
			}
			resultSet.close();
			preparedStatement.close();
			connection.close();
			
			
			
		} catch(SQLException | ClassNotFoundException e) {
			e.printStackTrace();
		}
		
		
		
		return list;
	}
	
	
	

}
